# Evaluation function for the game board
def evaluate_board(board):
    # Check rows, columns, and diagonals for a win
    for row in board:
        if row.count('X') == 3:
            return 1
        if row.count('O') == 3:
            return -1
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] == 'X':
            return 1
        if board[0][col] == board[1][col] == board[2][col] == 'O':
            return -1
    if board[0][0] == board[1][1] == board[2][2] == 'X' or board[0][2] == board[1][1] == board[2][0] == 'X':
        return 1
    if board[0][0] == board[1][1] == board[2][2] == 'O' or board[0][2] == board[1][1] == board[2][0] == 'O':
        return -1
    return 0  # Draw or incomplete game

# Minimax algorithm
def minimax(board, depth, is_maximizing):
    score = evaluate_board(board)

    if score == 1:
        return score - depth
    if score == -1:
        return score + depth
    if ' ' not in ''.join(board[0] + board[1] + board[2]):  # Board is full, it's a draw
        return 0

    if is_maximizing:
        max_eval = float('-inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'
                    eval = minimax(board, depth + 1, False)
                    board[i][j] = ' '
                    max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'
                    eval = minimax(board, depth + 1, True)
                    board[i][j] = ' '
                    min_eval = min(min_eval, eval)
        return min_eval

# Find the best move for the computer player
def find_best_move(board):
    best_move = (-1, -1)
    best_eval = float('-inf')
    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'X'
                eval = minimax(board, 0, False)
                board[i][j] = ' '
                if eval > best_eval:
                    best_eval = eval
                    best_move = (i, j)
    return best_move

# Main function
def main():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    print("Initial Board:")
    for row in board:
        print('|'.join(row))
    print("-------------")

    while True:
        x, y = map(int, input("Enter your move (row and column): ").split())
        if board[x][y] != ' ':
            print("Invalid move, try again.")
            continue
        board[x][y] = 'O'
        print("Your move:")
        for row in board:
            print('|'.join(row))
        print("-------------")

        if evaluate_board(board) == -1:
            print("You win!")
            break

        best_move = find_best_move(board)
        board[best_move[0]][best_move[1]] = 'X'
        print("Computer's move:")
        for row in board:
            print('|'.join(row))
        print("-------------")

        if evaluate_board(board) == 1:
            print("Computer wins!")
            break
        elif ' ' not in ''.join(board[0] + board[1] + board[2]):
            print("It's a draw!")
            break

if __name__ == "__main__":
    main()
